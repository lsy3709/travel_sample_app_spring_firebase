//Encode Video To String With mig Base64.

    File tempFile = new File(Environment.getExternalStorageDirectory()
                + "/my/part/my_0.mp4");
        String encodedString = null;

        InputStream inputStream = null;
        try {
            inputStream = new FileInputStream(tempFile);
        } catch (Exception e) {
            // TODO: handle exception
        }
        byte[] bytes;
        byte[] buffer = new byte[8192];
        int bytesRead;
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        try {
            while ((bytesRead = inputStream.read(buffer)) != -1) {
                output.write(buffer, 0, bytesRead);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        bytes = output.toByteArray();
        encodedString = Base64.encodeToString(bytes, true);
        Log.i("Strng", encodedString);


//Decode String To Video With mig Base64.
        byte[] decodedBytes = Base64.decodeFast(encodedString.getBytes());

        try {

            FileOutputStream out = new FileOutputStream(
                    Environment.getExternalStorageDirectory()
                            + "/my/Convert.mp4");
            out.write(decodedBytes);
            out.close();
        } catch (Exception e) {
            // TODO: handle exception
            Log.e("Error", e.toString());

        }


        //2번째 방법
        //Just like in the previous answer,
        keep in mind that encoding a file to Base64 can greatly
        increase its size,
        so it's usually a good idea to compress the file
        before encoding it.

        import android.util.Base64
        import java.io.FileInputStream

        fun encodeToBase64(filePath: String): String? {
            var inputStream: FileInputStream? = null
            return try {
                inputStream = FileInputStream(filePath)
                val videoBytes = ByteArray(inputStream.available())
                inputStream.read(videoBytes)
                Base64.encodeToString(videoBytes, Base64.DEFAULT)
            } catch (e: Exception) {
                null
            } finally {
                try {
                    inputStream?.close()
                } catch (e: Exception) { }
            }
        }

디코드
// This code decodes the Base64-encoded string and writes
the decoded bytes to a file at the specified file path.
The filePath argument should include the desired file name
and its extension (e.g. /path/to/file.mp4).
The function returns true if the decoding and
file writing was successful, and false otherwise.





import android.util.Base64
import java.io.FileOutputStream

fun decodeFromBase64(base64Encoded: String, filePath: String): Boolean {
    var outputStream: FileOutputStream? = null
    return try {
        val videoBytes = Base64.decode(base64Encoded, Base64.DEFAULT)
        outputStream = FileOutputStream(filePath)
        outputStream.write(videoBytes)
        true
    } catch (e: Exception) {
        false
    } finally {
        try {
            outputStream?.close()
        } catch (e: Exception) { }
    }
}


//mp4 compress sample code
import android.util.Log

class FFmpegCompressor {
    companion object {
        private const val TAG = "FFmpegCompressor"

        // Load the FFmpeg library
        init {
            System.loadLibrary("avutil-54")
            System.loadLibrary("swresample-1")
            System.loadLibrary("avcodec-56")
            System.loadLibrary("avformat-56")
            System.loadLibrary("swscale-3")
            System.loadLibrary("avfilter-5")
            System.loadLibrary("avdevice-56")
            System.loadLibrary("myffmpeg")
        }

        external fun compressVideo(
            videoFile: String,
            outputFile: String,
            width: Int,
            height: Int,
            bitRate: Int
        ): Int

        // Call the FFmpeg library to compress the video
        fun compress(inputFile: String, outputFile: String, width: Int, height: Int, bitRate: Int): Boolean {
            val result = compressVideo(inputFile, outputFile, width, height, bitRate)
            Log.d(TAG, "Compression result: $result")
            return result == 0
        }
    }
}

