 // 1
    // 1 인텐트로 갤러리 앱의 사진 목록을 출력하는 코드
    // 예제
    // 인텐트의 액션 문자열 : Intent.ACTION_PICK
    // 데이터 : MediaStore.Images.Media.CONTENT_TYPE
    // 타입 : "image/*"
//    val intent = Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI)
//    intent.type = "image/*"
//    requestGalleyLancher.lanch(intent)

//    선택한 사진 액티비티 화면에 출력 OOM(out of memory) 발생 주의 위해서 사이즈 변경.
//     BitmapFactory.Option 객체의 inSampleSize 값 지정 또는
//     원본 데이터의 크기와 화면에 출력되는 이미지의 크기를 비교해서 적절한 비율로 만드는 함수
//     깡쌤 샘플 코드 활용
    //
//    private fun calculateInSampleSize(fileUri: Uri, reqWidth: Int, reqHeight: Int): Int {
//        val options = BitmapFactory.Options()
//        //옵션만 설정하기 위해서 설정.
//        options.inJustDecodeBounds = true
//        try {
//            var inputStream = contentResolver.openInputStream(fileUri)
//
//            //inJustDecodeBounds 값을 true 로 설정한 상태에서 decodeXXX() 를 호출.
//            // 실제로 Bitmap 객체가 만들어지지 않고 아래에
//            //로딩 하고자 하는 이미지의 각종 정보가 options 에 설정 된다.
//            BitmapFactory.decodeStream(inputStream, null, options)
//            inputStream!!.close()
//            inputStream = null
//        } catch (e: Exception) {
//            e.printStackTrace()
//        }
//        //비율 계산........................
//        val (height: Int, width: Int) = options.run { outHeight to outWidth }
//        var inSampleSize = 1
//        //inSampleSize 비율 계산
//        if (height > reqHeight || width > reqWidth) {
//
//            val halfHeight: Int = height / 2
//            val halfWidth: Int = width / 2
//
//            while (halfHeight / inSampleSize >= reqHeight && halfWidth / inSampleSize >= reqWidth) {
//                inSampleSize *= 2
//            }
//        }
//        return inSampleSize
//    }

    // 갤러리 앱의 목록에서 사용자가 사진을 하나 선택해서 되돌아왔을 때 위의
    // calculateInSampleSize() 함수를 이용해 이미지를 불러오는 코드.
    //
    //gallery request launcher..................
//    val requestGalleryLauncher = registerForActivityResult(
//        ActivityResultContracts.StartActivityForResult())
//    {
//        try {
//            //inSampleSize 비율 계산, 지정
//            val calRatio = calculateInSampleSize(
//                it.data!!.data!!,
//                //출력할 이미지의 화면 크기를 나타냄
//                // dimen 리소스값을 얻어 지정. 임의의 숫자를 지정해도 됨.
//                resources.getDimensionPixelSize(R.dimen.imgSize),
//                resources.getDimensionPixelSize(R.dimen.imgSize)
//            )
//            val option = BitmapFactory.Options()
//            option.inSampleSize = calRatio
//
//            //이미지 로딩
//            // 갤러리 앱의 콘텐츠 프로바이더가 제공하는 InputStream 객체를 가져옴.
//            // 이 객체에 사용자가 갤러리 앱에서 선택한 사진 데이터가 담겨 있음.
//            // contentResolver.openInputStream(it.data!!.data!!)
//            //
//            var inputStream = contentResolver.openInputStream(it.data!!.data!!)
//            val bitmap = BitmapFactory.decodeStream(inputStream, null, option)
//            inputStream!!.close()
//            inputStream = null
//
//            bitmap?.let {
//                binding.userImageView.setImageBitmap(bitmap)
//            } ?: let{
//                Log.d("test", "bitmap null")
//            }
//        }catch (e: Exception){
//            e.printStackTrace()
//        }
//    }
    //주의사항
    // 카메라로 찍은 사진 이미지는 갤러리 앱의 콘텐츠 프로바이더를 이용해 사진의 경로를 얻은 뒤
    // 그 경로의 이미지를 decodeFile() 함수로 가저오는 것은 API 레벨 29에서 deprecated 됨.
    // 물론 지금 사용 가능하지만, 비추.
    // 구글은 파일을 직접 읽는 방식이 아니라 갤러리 앱의 콘텐츠 프로바이더에서 제공하는
    // InputStream 사용 권고.

    //2 카메라 앱 연동하기
    //
    // 사진 촬영하고 그 결과를 돌려받는 방법 2가지
    // 1) 사진 데이터를 가져오는 방법
    // 2) 사진 파일을 공유하는 방법

    // 1) 사진 데이터를 가져오는 방법
    // 카메라 앱으로 사진을 촬영한 후 파일로 저장하지 않고 데이터만 넘겨주는 방식.
    // 장점 : 파일로 저장 x 쉽게 구현, 단점 : 넘어오는 사진 데이터의 크기가 작다.

    // 2) 사진 파일을 공유하는 방법
    // 촬영한 사진을 파일에 저장한 후 성공인지 실패인지 넘겨주는 방식.
    // 장점 : 휴대폰의 카메라 성능만큼 큰 크기의 사진을 촬영하고 앱에서 사용가능.
    // 단점 : 카메라 앱이 파일 정보를 공유하는 것이므로 몇가지 준비 작업 필요.

    // 사진 데이터를 가져오는 방법
    // 인텐트로 카메라 앱의 사진 촬영 액티비티를 실행.
    // 카메라 앱 실행 촬영하고 내가 만든 앱으로 돌아온다.
//    val intent2 = Intent(MediaStore.ACTION_IMAGE_CAPTURE)
//    requestCameraThumbnailLanuncher.launch(intent)

    // 1) 사진 데이터 가져오기
//    val requestCameraThumbnailLanuncher = registerForActivityResult(
//        ActivityResultContracts.StartActivityForResult())
//    {
//        val bitmap = it?.data?.extras?.get("data") as Bitmap
//    }
    //
    // 2) 사진 파일을 공유하는 방법
    // ㄱ) 앱에서 사진을 저장할 파일 만들기
    // ㄴ) 사진 파일 정보를 포함한 인텐트를 전달해 카메라 앱을 실행.
    // ㄷ) 카메라 앱으로 사진을 촬영하여 공유된 파일에 저장.
    // ㄹ) 카메라 앱을 종료하면서 성공 또는 실패를 반환.
    // ㅁ) 카메라 앱이 저장한 사진 파일을 앱에서 이용.

    // 2) 이용을 위해 앱에서 외장 메모리에 파일을 만들어 줘야 함.
    // getExternalStoragePublicDirectory() 또는 : 모든 앱에서 이용할 수 있는 파일 만들기
    // getExternalFileDir() 함수를 이용 : 이 앱에서만 이용할 수 있는 파일 만들기
    //
    //  getExternalStoragePublicDirectory 이용해 외장 메모리에 파일을 만들려면
    // 다음 퍼미션을 설정 해줘야 함.
    // <uses-permission android:name="android.permission.WRITE_GSERVICES" />

    // getExternalFileDir  파일 만들 때에도 같은 퍼미션을 줘야 하지만, API 레벨 19 버전 부터는
    // 이 작업 할 필요가 없음. API 레벨 19 버전 하위 버전에서 동작하는 앱을 만들 때는 필요.

    // 주의사항
    // API 레벨 24 버전부터는 file:// 프로토콜로 구성된 URI 을 외부에 노출하지 못하도록 하는 엄격모드 적용.
    // 앱 끼리 파일을 공유하려면 content:// 프로토콜 이용하고
    // URI에 임시로 접근할 수 있는 권한을 부여

    // FileProvider 클래스 이용
    // androidx 라이브러리에서 제공하며 XML 설정을 기반으로 해서 content:// 프로토콜로 구성된 URI 생성해줌.
    // FileProvider 클래스 이용해서 공유할 파일의 URI 값을 만들어야 함.!!
    // 프로젝트의 res/xml 디렉터리에 파일 프로바이더용 XML 파일을 만들어줘야 함.
    //
    // 파일 프로바이더용 XML 파일은 path 속성에 지정한 경로의 파일 권한을 설정.
    // 이곳에 지정한 경로는 getExternalFileDir() 함수로 파일을 만들었을 때 파일이 저장되는 위치.

    // <paths xmlns:android="http://schemas.android.com/apk/res/android">
    //    <external-path
    //        name="myfiles"
    //        path="Android/data/com.example.ch16_provider/files/Pictures"/>
    // </paths>

    //
    // 매니페스트 파일에 파일 프로바이더용 XML 파일 등록
    //
    // resource 속성으로 res/xml 에 만들어 놓은 XML 파일을 지정. -> @xml/file_paths
    //
    // <provider android:name="androidx.core.content.FileProvider"
    //            android:authorities="com.example.ch16_provider.fileprovider"
    //            android:exported="false"
    //            android:grantUriPermissions="true">
    //            <meta-data android:name="android.support.FILE_PROVIDER_PATHS"
    //                android:resource="@xml/file_paths"></meta-data>
    //        </provider>

    // 파일 만들기
    //  val timeStamp: String =
    //  SimpleDateFormat("yyyyMMdd_HHmmss").format(Date())

    //  Environment.DIRECTORY_PICTURES: 시스템 기본 환경 위치
    //  val storageDir: File? = getExternalFilesDir(Environment.DIRECTORY_PICTURES)

    // 첫 매개변수 : 접두사, 두번째 매개변수 : 접미사, 세번째 매개변수 : 저장경로
    //  val file = File.createTempFile(
    //       "JPEG_${timeStamp}_",
    //        ".jpg",
    //        storageDir
    //            )

    // 나중에 파일 내용을 읽을 때 사용하려고 파일 경로를 filePath에 저장.
    //   filePath = file.absolutePath

    // getExternalFilesDir() 함수로 파일을 만들면서
    // Environment.DIRECTORY_PICTURES
    // : Android/data/com.example.ch16_provider/files/Pictures

    // 카메라 앱을 실행하는 인텐트
    //
    // 설정한 정보를 바탕으로 FileProvider 를 이용해 Uri 객체를 만들고
    // 카메라 앱을 실행하는 인텐트의 엑스트라 데이터로 설정.
    // 파일 정보를 가지고 카메라 앱의 액티비가 실행 됨.
    //
    //
    // val photoURI: Uri = FileProvider.getUriForFile(
    //                this,
    //                "com.example.ch16_provider.fileprovider",
    //                file
    //            )
    //            val intent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)
    //            intent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI)
    //            requestCameraFileLauncher.launch(intent)
    //
    //

    // 비트맵 이미지 생성
    //
    // 저장해둔 파일 경로를 decodeFile() 함수에 전달해서 비트맵 객체 얻기.
    // OOM 오류를 막으려고 BitmapFactory.Options() 의 inSampleSize 값 지정. 적절한 비율 정하기.
    //
    //  val requestCameraFileLauncher = registerForActivityResult(
    //            ActivityResultContracts.StartActivityForResult()){
    //
    //            val option = BitmapFactory.Options()
    //            option.inSampleSize = 10
    //            val bitmap = BitmapFactory.decodeFile(filePath, option)
    //            bitmap?.let {
    //                binding.userImageView.setImageBitmap(bitmap)
    //            }
    //        }
    //
    // 이미지 파일 경로 확인.
    // /storage/emulated/0/Android/data/com.example.ch16_provider/files/Pictures

    ==========================================================================
    package com.example.ch16_provider

    import android.content.Intent
    import android.graphics.BitmapFactory
    import android.net.Uri
    import android.os.Bundle
    import android.os.Environment
    import android.provider.MediaStore
    import android.util.Log
    import androidx.activity.result.contract.ActivityResultContracts
    import androidx.appcompat.app.AppCompatActivity
    import androidx.core.content.FileProvider
    import com.example.ch16_provider.databinding.ActivityMainBinding
    import java.io.File
    import java.text.SimpleDateFormat
    import java.util.*

    class MainActivity : AppCompatActivity() {

        lateinit var binding: ActivityMainBinding
        lateinit var filePath: String

        override fun onCreate(savedInstanceState: Bundle?) {
            super.onCreate(savedInstanceState)

            binding = ActivityMainBinding.inflate(layoutInflater)
            setContentView(binding.root)

            //gallery request launcher..................
            val requestGalleryLauncher = registerForActivityResult(
                ActivityResultContracts.StartActivityForResult())
            {
                try {
                    val calRatio = calculateInSampleSize(
                        it.data!!.data!!,
                        resources.getDimensionPixelSize(R.dimen.imgSize),
                        resources.getDimensionPixelSize(R.dimen.imgSize)
                    )

                    val option = BitmapFactory.Options()
                    option.inSampleSize = calRatio

                    var inputStream = contentResolver.openInputStream(it.data!!.data!!)
                    val bitmap = BitmapFactory.decodeStream(inputStream, null, option)
                    inputStream!!.close()
                    inputStream = null

                    bitmap?.let {
                        binding.userImageView.setImageBitmap(bitmap)
                    } ?: let{
                        Log.d("test", "bitmap null")
                    }
                }catch (e: Exception){
                    e.printStackTrace()
                }
            }


            binding.galleryButton.setOnClickListener {
                //gallery app........................
                val intent = Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI)
                intent.type = "image/*"
                requestGalleryLauncher.launch(intent)
            }

            //camera request launcher.................
            val requestCameraFileLauncher = registerForActivityResult(
                ActivityResultContracts.StartActivityForResult()){
                val calRatio = calculateInSampleSize(
                    Uri.fromFile(File(filePath)),
                    resources.getDimensionPixelSize(R.dimen.imgSize),
                    resources.getDimensionPixelSize(R.dimen.imgSize)
                )
                val option = BitmapFactory.Options()
                option.inSampleSize = calRatio
                val bitmap = BitmapFactory.decodeFile(filePath, option)
                bitmap?.let {
                    binding.userImageView.setImageBitmap(bitmap)
                }
            }


            binding.cameraButton.setOnClickListener {
                //camera app......................
                //파일 준비...............
                val timeStamp: String =
                    SimpleDateFormat("yyyyMMdd_HHmmss").format(Date())
                val storageDir: File? = getExternalFilesDir(Environment.DIRECTORY_PICTURES)
                val file = File.createTempFile(
                    "JPEG_${timeStamp}_",
                    ".jpg",
                    storageDir
                )
                filePath = file.absolutePath

                val photoURI: Uri = FileProvider.getUriForFile(
                    this,
                    "com.example.ch16_provider.fileprovider",
                    file
                )
                val intent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)
                intent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI)
                requestCameraFileLauncher.launch(intent)

            }
        }

        private fun calculateInSampleSize(fileUri: Uri, reqWidth: Int, reqHeight: Int): Int {
            val options = BitmapFactory.Options()
            options.inJustDecodeBounds = true
            try {
                var inputStream = contentResolver.openInputStream(fileUri)

                //inJustDecodeBounds 값을 true 로 설정한 상태에서 decodeXXX() 를 호출.
                //로딩 하고자 하는 이미지의 각종 정보가 options 에 설정 된다.
                BitmapFactory.decodeStream(inputStream, null, options)
                inputStream!!.close()
                inputStream = null
            } catch (e: Exception) {
                e.printStackTrace()
            }
            //비율 계산........................
            val (height: Int, width: Int) = options.run { outHeight to outWidth }
            var inSampleSize = 1
            //inSampleSize 비율 계산
            if (height > reqHeight || width > reqWidth) {

                val halfHeight: Int = height / 2
                val halfWidth: Int = width / 2

                while (halfHeight / inSampleSize >= reqHeight && halfWidth / inSampleSize >= reqWidth) {
                    inSampleSize *= 2
                }
            }
            return inSampleSize
        }

    }